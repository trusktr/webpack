{"version":3,"sources":["src/Cube.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;;IAUa,I,WAAA,I;;;;;;;;;;;AAQT,kBAAY,SAAZ,EAAuB;AAAA;;AAAA,kHACb,EAAC,MAAM,SAAP,EADa;;AAGnB,8BAAY,QAAZ,CAAqB;AACjB,sCADiB;AAEjB;AAFiB,SAArB;;AAKA,cAAK,SAAL,GAAiB,SAAjB;;AAEA,cAAK,aAAL,GAAqB,EAArB;AACA,cAAK,SAAL,GAAiB,EAAjB;;;AAGA,iCAAU,CAAV,EAAa,MAAK,eAAL,CAAqB,IAArB,OAAb;AAdmB;AAetB;;;;;;;;;;;;;;;wCAWe,K,EAAO;AACnB,gBAAI,uBAAJ;AACA,gBAAI,UAAU,wBAAd;AACA,gBAAI,OAAO,oBAAU;AACjB,sBAAM,CAAC,KAAK,SAAN,EAAgB,KAAK,SAArB,CADW;AAEjB,4BAAY;AACR,gCAAY,MADJ;AAER,wCAAoB;AAFZ;AAFK,aAAV,CAAX;AAOA,gBAAI,OAAO,0BAAgB,CAAC,OAAD,EAAS,OAAT,CAAhB,CAAX;;AAEA,iBAAK,SAAL,CAAe,IAAf,CAAoB,IAApB;;AAEA,iBAAK,IAAL,CAAU,IAAV;AACA,iBAAK,IAAL,CAAU,KAAK,OAAL,CAAa,OAAvB;;;AAGA,gBAAI,QAAQ,CAAZ,EAAe;;AACX,wBAAQ,QAAR,CAAiB,aAAjB,CAAgC,EAAE,QAAF,CAAW,EAAE,MAAF,CAAS,CAAT,EAAa,KAAK,EAAL,GAAQ,CAAT,GAAY,KAAxB,EAA+B,CAA/B,CAAX,EAA8C,EAAE,SAAF,CAAY,CAAZ,EAAc,CAAd,EAAgB,KAAK,SAAL,GAAe,CAA/B,CAA9C,CAAhC;AACH,aAFD,MAGK;;AACD,wBAAQ,QAAR,CAAiB,aAAjB,CAAgC,EAAE,QAAF,CAAW,EAAE,MAAF,CAAW,KAAK,EAAL,GAAQ,CAAT,IAAa,QAAM,CAAN,GAAQ,CAAC,CAAT,GAAW,CAAxB,CAAV,EAAsC,CAAtC,EAAyC,CAAzC,CAAX,EAAwD,EAAE,SAAF,CAAY,CAAZ,EAAc,CAAd,EAAgB,KAAK,SAAL,GAAe,CAA/B,CAAxD,CAAhC;AACH;;AAED,iBAAK,aAAL,CAAmB,IAAnB,CACI,KAAK,IAAL,CAAU,GAAV,CAAc,QAAQ,IAAtB,CADJ;AAGA,oBAAQ,IAAR,CAAa,GAAb,CAAiB,KAAK,IAAtB;AACH;;;;;;;;;;;;oCASW,Q,EAAU;AAClB,qCAAU,CAAV,EAAa,UAAS,KAAT,EAAgB;;AAEzB,qBAAK,aAAL,CAAmB,KAAnB,EAA0B,GAA1B,CAA8B,SAAS,KAAT,CAA9B;AACH,aAHY,CAGX,IAHW,CAGN,IAHM,CAAb;AAIA,mBAAO,IAAP;AACH;;;;;;;;;;;;kBAEU,I","file":"Cube.js","sourcesContent":["/*\n * LICENSE\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n */\n\nimport Transform from 'famous/src/core/Transform';\nimport MouseSync from 'famous/src/inputs/MouseSync';\nimport TouchSync from 'famous/src/inputs/TouchSync';\nimport GenericSync from 'famous/src/inputs/GenericSync';\n\nimport Molecule from './Molecule';\nimport Plane from './Plane';\n\nimport forLength from 'army-knife/forLength';\n\n/**\n * A scenegraph tree that lays things out in a cube form. The leaf nodes of the\n * scenegraph (the cube sides) are Molecules. Add anything to the leaf nodes\n * that a [famous/src/core/RenderNode](#famous/src/core/RenderNode) would normally accept.\n *\n * @class Cube\n * @extends Molecule\n */\nexport class Cube extends Molecule {\n\n    /**\n     * Create a new Cube.\n     *\n     * @constructor\n     * @param {Number} cubeWidth The integer width of the cube.\n     */\n    constructor(cubeWidth) {\n        super({size: cubeWidth});\n\n        GenericSync.register({\n            mouse: MouseSync,\n            touch: TouchSync\n        });\n\n        this.cubeWidth = cubeWidth;\n\n        this.cubeSideNodes = [];\n        this.cubeSides = [];\n\n        // TODO: v0.1.0: Put this in a function.\n        forLength(6, this._createCubeSide.bind(this));\n    }\n\n    /**\n     * Creates the 6 sides of the cube (the leafnodes of the scenegraph).\n     *\n     * TODO v0.1.0: Rename to CubeLayout.\n     * TODO v0.1.0: Don't create Planes for each side, let the user specify their own content for each side using this.setChildren.\n     *\n     * @private\n     * @param {Number} index The index (a integer between 0 and 5) that specifies which side to create.\n     */\n    _createCubeSide(index) {\n        var T = Transform;\n        var sideMol = new Molecule();\n        var side = new Plane({\n            size: [this.cubeWidth,this.cubeWidth],\n            properties: {\n                background: 'pink',\n                backfaceVisibility: 'visible'\n            }\n        });\n        var sync = new GenericSync(['mouse','touch']);\n\n        this.cubeSides.push(side);\n\n        side.pipe(sync);\n        sync.pipe(this.options.handler);\n\n        // rotate and place each side.\n        if (index < 4) { // sides\n            sideMol.modifier.transformFrom( T.multiply(T.rotate(0, (Math.PI/2)*index, 0), T.translate(0,0,this.cubeWidth/2)));\n        }\n        else { // top/bottom\n            sideMol.modifier.transformFrom( T.multiply(T.rotate( (Math.PI/2)*(index%2?-1:1), 0, 0), T.translate(0,0,this.cubeWidth/2)));\n        }\n\n        this.cubeSideNodes.push(\n            this.node.add(sideMol.node)\n        );\n        sideMol.node.add(side.node);\n    }\n\n    /**\n     * Set the content for the sides of the cube.\n     *\n     * @param {Array} children An array containing anything that a\n     * [famous/src/core/RenderNode](#famous/src/core/RenderNode) would accept in it's `add` method. Only the\n     * first 6 items are used, the rest are ignored.\n     */\n    setChildren(children) {\n        forLength(6, function(index) {\n            //this.cubeSideNodes[index].set(null); // TODO: how do we erase previous children?\n            this.cubeSideNodes[index].add(children[index]);\n        }.bind(this));\n        return this;\n    }\n}\nexport default Cube;\n"]}