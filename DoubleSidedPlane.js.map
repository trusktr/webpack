{"version":3,"sources":["src/DoubleSidedPlane.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;AAEA;;;;AACA;;;;;;;;;;;;;;;;IAWa,gB,WAAA,gB;;;;;;;;;;;;;AAUT,4BAAY,cAAZ,EAA4B;AAAA;;AAAA,0HAClB,cADkB;;AAGxB,UAAK,QAAL,GAAgB,EAAhB;AACA,UAAK,MAAL,GAAc,oBAAU,MAAK,OAAf,CAAd;AACA,UAAK,MAAL,CAAY,SAAZ,CAAsB,GAAtB,CAA0B,oBAAU,MAAV,CAAiB,CAAjB,EAAmB,CAAnB,EAAqB,CAArB,CAA1B;AACA,UAAK,UAAL,CAAgB,EAAC,YAAY,EAAC,YAAY,QAAb,EAAb,EAAhB;AACA,UAAK,MAAL,GAAc,oBAAU,MAAK,OAAf,CAAd;AACA,UAAK,MAAL,CAAY,SAAZ,CAAsB,GAAtB,CAA0B,oBAAU,MAAV,CAAiB,CAAjB,EAAmB,KAAK,EAAxB,EAA2B,CAA3B,CAA1B;;AAEA,UAAK,QAAL,CAAc,IAAd,CAAmB,MAAK,MAAxB;AACA,UAAK,QAAL,CAAc,IAAd,CAAmB,MAAK,MAAxB;AACA,UAAK,IAAL,CAAU,GAAV,CAAc,MAAK,MAAL,CAAY,IAA1B;AACA,UAAK,IAAL,CAAU,GAAV,CAAc,MAAK,MAAL,CAAY,IAA1B;AACA,UAAK,MAAL,CAAY,IAAZ,CAAiB,MAAK,OAAL,CAAa,OAA9B;AACA,UAAK,MAAL,CAAY,IAAZ,CAAiB,MAAK,OAAL,CAAa,OAA9B;;AAfwB;AAiB3B;;;;;;;;;;;;iCAQY;AACT,aAAO,CAAC,KAAK,MAAL,CAAY,UAAZ,EAAD,EAA2B,KAAK,MAAL,CAAY,UAAZ,EAA3B,CAAP;AACH;;;;;;;;;;;+BAQU,O,EAAS;AAChB,WAAK,MAAL,CAAY,UAAZ,CAAuB,QAAQ,CAAR,CAAvB;AACA,WAAK,MAAL,CAAY,UAAZ,CAAuB,QAAQ,CAAR,CAAvB;AACH;;;;;;;;;;;;kBAEU,gB","file":"DoubleSidedPlane.js","sourcesContent":["/*\n * LICENSE\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n */\n\nimport Transform from 'famous/src/core/Transform';\n\nimport Molecule from './Molecule';\nimport Plane from './Plane';\n\n/**\n * A scenegraph tree who's two leaf nodes are [Plane](#Plane) instances facing\n * opposite directions. For the purposes of these docs, in a brand new app with\n * only a single `DoubleSidedPlane` added to the context, and having no\n * rotation, \"plane1\" faces you and \"plane2\" faces away.\n *\n * @class DoubleSidedPlane\n * @extends Molecule\n */\nexport class DoubleSidedPlane extends Molecule {\n\n    /**\n     * Creates a new `DoubleSidedPlane` who's `initialOptions` get passed to\n     * both [Plane](#Plane) instances, as well as this DoubleSidedPlane's parent\n     * [Molecule](#Molecule) constructor.\n     *\n     * @constructor\n     * @param {Object} initialOptions The options to initiate the `DoubleSidedPlane` with.\n     */\n    constructor(initialOptions) {\n        super(initialOptions);\n\n        this.children = [];\n        this.plane1 = new Plane(this.options);\n        this.plane1.transform.set(Transform.rotate(0,0,0));\n        this.setOptions({properties: {background: 'orange'}});\n        this.plane2 = new Plane(this.options);\n        this.plane2.transform.set(Transform.rotate(0,Math.PI,0));\n\n        this.children.push(this.plane1);\n        this.children.push(this.plane2);\n        this.node.add(this.plane2.node);\n        this.node.add(this.plane1.node);\n        this.plane1.pipe(this.options.handler);\n        this.plane2.pipe(this.options.handler);\n\n    }\n\n    /**\n     * Get the content of the [famous/src/core/Surface](#famous/src/core/Surface) of each [Plane](#Plane).\n     *\n     * @returns {Array} An array containing two items, the content of each\n     * `Plane`. The first item is from \"plane1\".\n     */\n    getContent() {\n        return [this.plane1.getContent(), this.plane2.getContent()];\n    }\n\n    /**\n     * Set the content of both [Plane](#Plane) instances.\n     *\n     * @param {Array} content An array of content, one item per `Plane`. The\n     * first item is for \"plane1\".\n     */\n    setContent(content) {\n        this.plane1.setContent(content[0]);\n        this.plane2.setContent(content[1]);\n    }\n}\nexport default DoubleSidedPlane;\n"]}