{"version":3,"sources":["src/Grid.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;IAaa,I,WAAA,I;;;;;;;;;;;;;;AAWT,kBAAY,OAAZ,EAAqB,IAArB,EAA2B,IAA3B,EAAiC;AAAA;;AAAA,kHACvB,EAAC,MAAM,IAAP,EADuB;;AAG7B,cAAK,OAAL,GAAe,OAAf;AACA,cAAK,IAAL,GAAY,IAAZ;AACA,cAAK,SAAL,GAAiB,EAAjB;;AAEA,YAAI,OAAO,MAAK,OAAL,CAAa,IAApB,KAA6B,WAAjC,EAA8C;AAAE,kBAAK,UAAL,CAAgB,EAAC,MAAM,CAAC,SAAD,EAAY,SAAZ,CAAP,EAAhB;AAAkD;;AAElG,iCAAU,MAAK,OAAL,GAAa,MAAK,IAA5B,EAAkC,MAAK,eAAL,CAAqB,IAArB,OAAlC;AAT6B;AAUhC;;;;;;;;;;;;wCAQe,K,EAAO;AACnB,gBAAI,SAAS,QAAQ,KAAK,OAA1B;AACA,gBAAI,MAAM,KAAK,KAAL,CAAW,QAAQ,KAAK,OAAxB,CAAV;;AAEA,gBAAI,WAAW,IAAf;AACA,gBAAI,OAAO,KAAK,OAAL,CAAa,IAAb,CAAkB,CAAlB,CAAP,IAA+B,WAA/B,IAA8C,OAAO,KAAK,OAAL,CAAa,IAAb,CAAkB,CAAlB,CAAP,IAA+B,WAAjF,EAA8F;AAC1F,2BAAW,EAAX;AACA,yBAAS,CAAT,IAAc,KAAK,OAAL,CAAa,IAAb,CAAkB,CAAlB,IAAqB,KAAK,OAAxC;AACA,yBAAS,CAAT,IAAc,KAAK,OAAL,CAAa,IAAb,CAAkB,CAAlB,IAAqB,KAAK,IAAxC;AACH;;AAED,gBAAI,MAAM,uBAAa;AACnB,uBAAO,CAAC,CAAD,EAAG,CAAH,CADY;AAEnB,wBAAQ,CAAC,CAAD,EAAG,CAAH,CAFW;AAGnB,sBAAM,WAAU,CAAC,SAAS,CAAT,CAAD,EAAc,SAAS,CAAT,CAAd,CAAV,GAAsC,CAAC,SAAD,EAAY,SAAZ,CAHzB;AAInB,2BAAW,oBAAU,SAAV,CAAoB,SAAO,SAAS,CAAT,CAA3B,EAAuC,MAAI,SAAS,CAAT,CAA3C,EAAuD,CAAvD;AAJQ,aAAb,CAAV;AAMA,gBAAI,OAAO,uBAAa;;AAEpB,uBAAO,CAAC,GAAD,EAAK,GAAL,CAFa;AAGpB,wBAAQ,CAAC,GAAD,EAAK,GAAL;AAHY,aAAb,CAAX;;;AAOA,iBAAK,SAAL,CAAe,IAAf,CAAoB,KAAK,IAAL,CAAU,GAAV,CAAc,GAAd,EAAmB,GAAnB,CAAuB,IAAvB,CAApB;AACH;;;;;;;;;;oCAOW,Q,EAAU;AAClB,qCAAU,KAAK,OAAL,GAAa,KAAK,IAA5B,EAAkC,UAAS,KAAT,EAAgB;;AAE9C,qBAAK,SAAL,CAAe,KAAf,EAAsB,GAAtB,CAA0B,SAAS,KAAT,CAA1B;AACH,aAHiC,CAGhC,IAHgC,CAG3B,IAH2B,CAAlC;AAIA,mBAAO,IAAP;AACH;;;;;kBAEU,I","file":"Grid.js","sourcesContent":["/*\n * LICENSE\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n */\n\nimport Modifier from 'famous/src/core/Modifier';\nimport Transform from 'famous/src/core/Transform';\n\nimport Molecule from './Molecule';\n\nimport forLength from 'army-knife/forLength';\n\n/**\n * A scenegraph tree with a variable number of leaf node Modifiers (the grid\n * cells) that are arranged in a grid. Add any [famous/src/core/RenderNode](#famous/src/core/RenderNode)-compatible\n * item to each leafnode of the grid.\n *\n * TODO: Use Molecule instead of Modifier for the grid cells.\n * TODO: Add an options parameter, that the Molecule constructor will handle.\n *\n * @class Grid\n * @extends Molecule\n */\nexport class Grid extends Molecule {\n\n    /**\n     * Creates a new Grid having the specified number of columns, number of rows,\n     * and famo.us-style size.\n     *\n     * @constructor\n     * @param {Number} columns The integer number of columns.\n     * @param {Number} rows The integer number of rows.\n     * @param {Array} size A famo.us-style width/height size array.\n     */\n    constructor(columns, rows, size) {\n        super({size: size});\n\n        this.columns = columns;\n        this.rows = rows;\n        this.cellNodes = [];\n\n        if (typeof this.options.size === 'undefined') { this.setOptions({size: [undefined, undefined]}); }\n\n        forLength(this.columns*this.rows, this._createGridCell.bind(this));\n    }\n\n    /**\n     * Creates a grid cell at the given index.\n     *\n     * @private\n     * @param {Number} index The integer index of the grid cell.\n     */\n    _createGridCell(index) {\n        var column = index % this.columns;\n        var row = Math.floor(index / this.columns);\n\n        var cellSize = null;\n        if (typeof this.options.size[0] != 'undefined' && typeof this.options.size[1] != 'undefined') {\n            cellSize = [];\n            cellSize[0] = this.options.size[0]/this.columns;\n            cellSize[1] = this.options.size[1]/this.rows;\n        }\n\n        var mod = new Modifier({\n            align: [0,0],\n            origin: [0,0],\n            size: cellSize? [cellSize[0], cellSize[1]]: [undefined, undefined],\n            transform: Transform.translate(column*cellSize[0],row*cellSize[1],0)\n        });\n        var mod2 = new Modifier({\n            //transform: Transform.rotateY(Math.PI/10),\n            align: [0.5,0.5],\n            origin: [0.5,0.5]\n        });\n        // FIXME: ^^^ Why do I need an extra Modifier to align stuff in the middle of the grid cells?????\n        // ^ I think this is a Famous 0.3 bug.\n        this.cellNodes.push(this.node.add(mod).add(mod2));\n    }\n\n    /**\n     * Sets the items to be layed out in the grid.\n     *\n     * @param {Array} children An array of [famous/src/core/RenderNode](#famous/src/core/RenderNode)-compatible items.\n     */\n    setChildren(children) {\n        forLength(this.columns*this.rows, function(index) {\n            //this.cellNodes[index].set(null); // TODO: how do we erase previous children?\n            this.cellNodes[index].add(children[index]);\n        }.bind(this));\n        return this;\n    }\n}\nexport default Grid;\n"]}